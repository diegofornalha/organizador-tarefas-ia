"""
Interface principal do orquestrador.
Este script implementa uma interface para gerenciar os m√≥dulos do sistema.
"""

import os
import sys
import io
import uuid
import socket
import contextlib
from datetime import datetime
import subprocess
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar page_config primeiro (DEVE ser a primeira chamada Streamlit)
import streamlit as st

st.set_page_config(page_title="Orquestrador de M√≥dulos", page_icon="üîå", layout="wide")

# Lista para armazenar logs
initialization_logs = []
system_logs = []

# Importar m√≥dulos - usando importa√ß√µes diretas
from app_logger import add_log, log_success, log_error, get_logs, clear_logs
from module_registry import module_registry, initialize_registry

# Sobrescrever fun√ß√µes padr√£o de notifica√ß√£o do Streamlit para capturar logs
original_success = st.success
original_info = st.info
original_warning = st.warning
original_error = st.error

# Import para os componentes de plano_tarefas - AP√ìS a configura√ß√£o da p√°gina
sys.path.insert(
    0,
    os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "..",
        "servicos_modularizados",
        "plano_tarefas",
    ),
)
try:
    from planejamento_components import planning_ui
    from tarefas_components import tasks_ui, criar_tarefas_do_plano
except ImportError:
    planning_ui = None
    tasks_ui = None
    criar_tarefas_do_plano = None


# Fun√ß√£o para capturar sa√≠da padr√£o (para logs)
def capture_output(func):
    def wrapper(*args, **kwargs):
        # Redirecionar stdout para capturar sa√≠da
        old_stdout = sys.stdout
        captured_output = io.StringIO()
        sys.stdout = captured_output

        # Executar fun√ß√£o
        result = func(*args, **kwargs)

        # Restaurar stdout e capturar sa√≠da
        sys.stdout = old_stdout
        output = captured_output.getvalue()

        # Armazenar cada linha como um log separado
        for line in output.splitlines():
            if line.strip():  # Ignorar linhas vazias
                initialization_logs.append(line)

        return result

    return wrapper


# Sobrescrever fun√ß√µes de notifica√ß√£o do Streamlit para capturar e n√£o exibir
def silent_success(message, *args, **kwargs):
    system_logs.append(f"SUCCESS: {message}")
    # N√£o chamar a fun√ß√£o original para n√£o exibir a notifica√ß√£o


def silent_info(message, *args, **kwargs):
    system_logs.append(f"INFO: {message}")
    # N√£o chamar a fun√ß√£o original para n√£o exibir a notifica√ß√£o


def silent_warning(message, *args, **kwargs):
    system_logs.append(f"WARNING: {message}")
    # N√£o chamar a fun√ß√£o original para n√£o exibir a notifica√ß√£o


def silent_error(message, *args, **kwargs):
    system_logs.append(f"ERROR: {message}")
    # N√£o chamar a fun√ß√£o original para n√£o exibir a notifica√ß√£o


# Substituir todas as fun√ß√µes de notifica√ß√£o do Streamlit pelas vers√µes silenciosas
# Isso far√° com que todas as mensagens sejam registradas nos logs, mas n√£o exibidas na interface
st.success = silent_success
st.info = silent_info
st.warning = silent_warning
st.error = silent_error


# Fun√ß√£o para obter logs combinados
def get_combined_logs(max_count=50):
    combined_logs = initialization_logs + system_logs
    return combined_logs[-max_count:] if combined_logs else []


# Fun√ß√£o para limpar todos os logs
def clear_all_logs():
    initialization_logs.clear()
    system_logs.clear()
    if callable(clear_logs):
        clear_logs()


# Inicializar o registro de m√≥dulos com captura de logs
registry = capture_output(initialize_registry)()

# Defini√ß√£o de portas para cada m√≥dulo
MODULE_PORTS = {
    "plano_tarefas": 8511,
    "analise_imagem": 8507,
    "historico_planos": 8512,
    "historico_tarefas": 8513,
    "geral": 8510,
}

# Defini√ß√£o dos √≠cones para cada m√≥dulo
MODULE_ICONS = {
    "plano_tarefas": "üìã",
    "analise_imagem": "üîç",
    "historico_planos": "üìö",
    "historico_tarefas": "üìù",
    "geral": "üß©",
}

# T√≠tulo da p√°gina
st.title("üîå Orquestrador de M√≥dulos")
st.write("Interface para gerenciamento dos m√≥dulos do sistema.")

# Logs do sistema (recolhidos por padr√£o)
with st.expander("Logs do Sistema", expanded=False):
    # Adicionar bot√£o de limpar
    cols = st.columns([4, 1])
    with cols[1]:
        if st.button("Limpar Logs"):
            clear_all_logs()
            # Usamos o original_success diretamente para esta √∫nica notifica√ß√£o
            if original_success is not None:
                original_success("Logs limpos")
            st.rerun()

    # Mostrar todos os logs
    logs = get_combined_logs(max_count=50)
    if logs:
        for log in logs:
            st.text(log)
    else:
        # Usamos o original_info diretamente
        if original_info is not None:
            original_info("Nenhum log dispon√≠vel.")
        else:
            st.write("Nenhum log dispon√≠vel.")

# Layout principal com colunas
col1, col2 = st.columns([1, 2])


# Fun√ß√£o para verificar se uma porta est√° em uso (servi√ßo est√° rodando)
def check_port_in_use(port):
    """Verifica se uma porta est√° em uso, indicando que o servi√ßo est√° rodando."""
    try:
        # Tenta criar uma conex√£o com a porta
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)  # Timeout curto para n√£o travar a interface
            return (
                s.connect_ex(("localhost", port)) == 0
            )  # Retorna True se a porta estiver em uso
    except:
        return False


# Fun√ß√£o para atualizar status dos m√≥dulos baseado nas portas ativas
def update_module_status():
    """Atualiza o status dos m√≥dulos verificando se seus servi√ßos est√£o rodando nas portas definidas."""
    for module_name, port in MODULE_PORTS.items():
        module_info = registry.get_module(module_name)
        if module_info and not module_info.is_loaded:
            # Se o m√≥dulo existe, n√£o est√° marcado como carregado, mas a porta est√° em uso
            if check_port_in_use(port) or (
                module_name == "plano_tarefas" and check_port_in_use(8511)
            ):
                system_logs.append(
                    f"INFO: Servi√ßo '{module_name}' detectado rodando na porta {port if module_name != 'plano_tarefas' else 8511}"
                )
                module_info.is_loaded = True
                # For√ßa um carregamento autom√°tico do m√≥dulo no registro
                if not module_info.module_instance:
                    try:
                        registry.load_module(module_name)
                    except Exception:
                        pass  # Ignora erros, o importante √© marcar como carregado


# Atualizar status dos m√≥dulos antes de mostrar a interface
update_module_status()

# Verifica√ß√£o espec√≠fica para o m√≥dulo plano_tarefas
plano_tarefas_module = registry.get_module("plano_tarefas")
if plano_tarefas_module and not plano_tarefas_module.is_loaded:
    # Se o servi√ßo estiver rodando na porta 8511, marcar como carregado
    if check_port_in_use(8511):
        system_logs.append(
            "INFO: For√ßando carregamento do m√≥dulo 'plano_tarefas' que est√° rodando na porta 8511"
        )
        plano_tarefas_module.is_loaded = True
        # For√ßar carregamento do m√≥dulo no registro se poss√≠vel
        try:
            registry.load_module("plano_tarefas")
        except Exception:
            pass  # Ignora erros, o importante √© marcar como carregado

# Coluna 1 - Lista de m√≥dulos dispon√≠veis
with col1:
    st.header("M√≥dulos Dispon√≠veis")

    col_buttons = st.columns(2)
    with col_buttons[0]:
        if st.button("Detectar M√≥dulos", key="detect_modules"):
            detect_logs = []
            with contextlib.redirect_stdout(io.StringIO()) as output:
                modules = registry.discover_modules()
                capture_output = output.getvalue()
                for line in capture_output.splitlines():
                    if line.strip():
                        detect_logs.append(line)
                        system_logs.append(line)

            st.write(f"‚úÖ Detectados {len(modules)} m√≥dulos")

    with col_buttons[1]:
        if st.button("Atualizar Status", key="refresh_status"):
            update_module_status()
            st.write("‚úÖ Status dos m√≥dulos atualizado")
            system_logs.append("INFO: Status dos m√≥dulos atualizado manualmente")
            st.rerun()

    # Listar m√≥dulos dispon√≠veis
    available_modules = registry.list_available_modules()

    if not available_modules:
        st.write("‚ö†Ô∏è Nenhum m√≥dulo dispon√≠vel. Clique em 'Detectar M√≥dulos'.")
    else:
        for module_name in available_modules:
            module = registry.get_module(module_name)
            if module is None:
                continue

            is_loaded = module.is_loaded

            col_mod1, col_mod2, col_mod3 = st.columns([3, 1, 1])
            with col_mod1:
                icon = MODULE_ICONS.get(module_name, "üì¶")
                if is_loaded:
                    st.markdown(f"‚úÖ **{icon} {module_name}**")
                else:
                    st.markdown(f"‚¨ú {icon} {module_name}")

            with col_mod2:
                if not is_loaded:
                    if st.button("Carregar", key=f"load_{module_name}"):
                        load_logs = []
                        with contextlib.redirect_stdout(io.StringIO()) as output:
                            success = registry.load_module(module_name)
                            capture_output = output.getvalue()
                            for line in capture_output.splitlines():
                                if line.strip():
                                    load_logs.append(line)
                                    system_logs.append(line)

                        if success:
                            st.write(f"‚úÖ M√≥dulo {module_name} carregado!")
                            st.rerun()
                        else:
                            st.write(f"‚ùå Erro ao carregar {module_name}")
                else:
                    st.text("Carregado")

            with col_mod3:
                port = MODULE_PORTS.get(module_name)
                if port:
                    if st.button("Executar", key=f"run_{module_name}"):
                        st.markdown(f"[Abrir {module_name}](http://localhost:{port})")
                        st.write(f"üîó Servi√ßo dispon√≠vel na porta {port}")

# Coluna 2 - Detalhes do m√≥dulo selecionado
with col2:
    st.header("Detalhes do M√≥dulo")

    # Seletor de m√≥dulo
    if available_modules:
        selected_module = st.selectbox("Selecione um m√≥dulo:", available_modules)

        module_info = registry.get_module(selected_module)

        if module_info:
            # Mostrar detalhes do m√≥dulo
            icon = MODULE_ICONS.get(selected_module, "üì¶")
            st.markdown(f"### {icon} {module_info.name}")
            st.write(f"**Descri√ß√£o:** {module_info.description}")
            st.write(f"**Vers√£o:** {module_info.version}")
            st.write(f"**Caminho:** {module_info.path}")

            # Status do m√≥dulo
            status = "Carregado" if module_info.is_loaded else "N√£o carregado"
            st.write(f"**Status:** {status}")

            # Portas e URLs
            port = MODULE_PORTS.get(selected_module)
            if port:
                st.write(f"**Porta:** {port}")
                st.write(f"**URL:** http://localhost:{port}")

                col_actions1, col_actions2 = st.columns(2)
                with col_actions1:
                    if not module_info.is_loaded:
                        if st.button(
                            "Carregar M√≥dulo", key=f"load_detail_{selected_module}"
                        ):
                            with contextlib.redirect_stdout(io.StringIO()) as output:
                                success = registry.load_module(selected_module)
                                capture_output = output.getvalue()
                                for line in capture_output.splitlines():
                                    if line.strip():
                                        system_logs.append(line)

                            if success:
                                st.write(f"‚úÖ M√≥dulo {selected_module} carregado!")
                                st.rerun()
                            else:
                                st.write(f"‚ùå Erro ao carregar {selected_module}")
                    else:
                        st.write("‚úÖ M√≥dulo carregado com sucesso!")

                with col_actions2:
                    if st.button("Abrir no Navegador", key=f"open_{selected_module}"):
                        st.markdown(
                            f"[Clique aqui para abrir {selected_module}](http://localhost:{port})"
                        )

            # Depend√™ncias
            if module_info.dependencies:
                with st.expander("Depend√™ncias", expanded=False):
                    for dep in module_info.dependencies:
                        dep_info = registry.get_module(dep)
                        dep_loaded = dep_info and dep_info.is_loaded
                        st.write(f"- {dep} {'‚úÖ' if dep_loaded else '‚ùå'}")

            # Componentes exportados
            if module_info.is_loaded and module_info.exported_components:
                with st.expander("Componentes Exportados", expanded=False):
                    for name, component in module_info.exported_components.items():
                        st.write(f"- **{name}**: `{type(component).__name__}`")

                        # Se for uma fun√ß√£o ou m√©todo, mostrar informa√ß√µes adicionais
                        if callable(component):
                            try:
                                import inspect

                                signature = inspect.signature(component)
                                st.code(f"{name}{signature}")
                            except Exception:
                                pass
            elif module_info.is_loaded:
                with st.expander("Componentes Exportados", expanded=False):
                    st.write("‚ÑπÔ∏è Nenhum componente exportado encontrado")
            else:
                with st.expander("Componentes Exportados", expanded=False):
                    st.write("‚ö†Ô∏è Carregue o m√≥dulo para ver componentes")

# √Årea de m√≥dulos
st.header("M√≥dulos do Sistema")

# Atualizar status dos m√≥dulos sempre que a p√°gina √© carregada
update_module_status()

# Criar abas din√¢micas para os m√≥dulos dispon√≠veis
if available_modules:
    # Primeiro, ordenar por status de carregamento
    sorted_modules = sorted(
        [m for m in available_modules if registry.get_module(m)],
        key=lambda m: not registry.get_module(m).is_loaded,
    )

    # Definir ordem espec√≠fica para todos os m√≥dulos
    def custom_sort_key(m):
        order = {
            "geral": 0,
            "plano_tarefas": 1,
            "analise_imagem": 2,
            "historico_planos": 3,
            "historico_tarefas": 4,
        }
        # Retorna a posi√ß√£o definida ou um valor alto para m√≥dulos n√£o listados
        return order.get(m, 100)

    sorted_modules = sorted(sorted_modules, key=custom_sort_key)

    tabs = st.tabs([f"{MODULE_ICONS.get(m, 'üì¶')} {m}" for m in sorted_modules])

    for i, module_name in enumerate(sorted_modules):
        with tabs[i]:
            module_info = registry.get_module(module_name)
            if not module_info:
                st.write(f"‚ùå M√≥dulo {module_name} n√£o encontrado")
                continue

            # Mostrar status e a√ß√µes
            if not module_info.is_loaded:
                st.write(f"‚ö†Ô∏è M√≥dulo {module_name} n√£o est√° carregado")
                if st.button("Carregar m√≥dulo", key=f"load_tab_{module_name}"):
                    with contextlib.redirect_stdout(io.StringIO()) as output:
                        success = registry.load_module(module_name)
                        capture_output = output.getvalue()
                        for line in capture_output.splitlines():
                            if line.strip():
                                system_logs.append(line)

                    if success:
                        st.write(f"‚úÖ M√≥dulo {module_name} carregado!")
                        st.rerun()
                    else:
                        st.write(f"‚ùå Erro ao carregar {module_name}")
            else:
                st.write(f"‚úÖ M√≥dulo {module_name} est√° carregado")

                # Op√ß√µes espec√≠ficas do m√≥dulo
                if module_name == "plano_tarefas":
                    st.subheader("Planejamento e Tarefas")
                    st.write("Este m√≥dulo permite criar e gerenciar planos e tarefas.")

                    # Verificar se os componentes necess√°rios est√£o dispon√≠veis
                    if planning_ui is None or tasks_ui is None:
                        st.error(
                            "N√£o foi poss√≠vel carregar os componentes necess√°rios."
                        )
                        port = MODULE_PORTS.get(module_name)
                        if port:
                            st.markdown(
                                f"[Acessar aplica√ß√£o completa](http://localhost:{port})"
                            )
                    else:
                        # Interface completa com abas
                        plan_tab, task_tab = st.tabs(["Planejamento", "Tarefas"])

                        with plan_tab:
                            # Usar o componente de planejamento
                            planning_container = st.container()
                            plan_data = planning_ui(planning_container)

                            # Se um plano foi criado, armazenar na sess√£o para uso em tarefas
                            if plan_data and isinstance(plan_data, dict):
                                if "current_plan" not in st.session_state:
                                    st.session_state.current_plan = plan_data
                                elif st.session_state.current_plan.get(
                                    "id"
                                ) != plan_data.get("id"):
                                    st.session_state.current_plan = plan_data

                                # Verificar se temos a fun√ß√£o para criar tarefas
                                if criar_tarefas_do_plano is not None:
                                    criar_tarefas_do_plano(plan_data)

                        with task_tab:
                            # Verificar se temos um plano selecionado
                            current_plan = st.session_state.get("current_plan", None)

                            if current_plan:
                                st.write(
                                    f"üìò Plano atual: **{current_plan.get('title', 'Sem t√≠tulo')}**"
                                )

                            # Usar o componente de tarefas
                            tasks_container = st.container()
                            tasks_ui(tasks_container)

                        # Links para acessar a aplica√ß√£o completa (mantidos para compatibilidade)
                        port = MODULE_PORTS.get(module_name)
                        if port:
                            st.write("---")
                            st.markdown(
                                f"üîó [Acessar aplica√ß√£o completa](http://localhost:{port}) - Servi√ßo dispon√≠vel na porta {port}"
                            )

                elif module_name == "analise_imagem":
                    st.subheader("An√°lise de Imagem")
                    st.write(
                        "Este m√≥dulo permite analisar imagens e gerar planejamentos a partir delas."
                    )

                    # Upload de imagem
                    uploaded_file = st.file_uploader(
                        "Escolha uma imagem",
                        type=["jpg", "jpeg", "png"],
                        key=f"image_uploader_{module_name}",
                    )

                    if uploaded_file:
                        st.image(uploaded_file, caption="Imagem carregada", width=300)

                        if st.button("Analisar imagem", key=f"analyze_{module_name}"):
                            st.write(
                                "‚ÑπÔ∏è Funcionalidade de an√°lise est√° dispon√≠vel na aplica√ß√£o completa"
                            )
                            port = MODULE_PORTS.get(module_name)
                            if port:
                                st.markdown(
                                    f"[Abrir aplica√ß√£o de an√°lise](http://localhost:{port})"
                                )

                    port = MODULE_PORTS.get(module_name)
                    if port:
                        if st.button(
                            "Iniciar aplica√ß√£o", key=f"start_app_{module_name}"
                        ):
                            st.markdown(f"[Abrir aplica√ß√£o](http://localhost:{port})")
                            st.write(f"üîó Servi√ßo dispon√≠vel na porta {port}")

                elif module_name == "historico_planos":
                    st.subheader("Hist√≥rico de Planos")
                    st.write("Este m√≥dulo gerencia o hist√≥rico de planos gerados.")

                    port = MODULE_PORTS.get(module_name)
                    if port:
                        if st.button(
                            "Iniciar aplica√ß√£o", key=f"start_app_{module_name}"
                        ):
                            st.markdown(f"[Abrir aplica√ß√£o](http://localhost:{port})")
                            st.write(f"üîó Servi√ßo dispon√≠vel na porta {port}")

                elif module_name == "historico_tarefas":
                    st.subheader("Hist√≥rico de Tarefas")
                    st.write(
                        "Este m√≥dulo gerencia o hist√≥rico de tarefas criadas e executadas."
                    )

                    port = MODULE_PORTS.get(module_name)
                    if port:
                        if st.button(
                            "Iniciar aplica√ß√£o", key=f"start_app_{module_name}"
                        ):
                            st.markdown(f"[Abrir aplica√ß√£o](http://localhost:{port})")
                            st.write(f"üîó Servi√ßo dispon√≠vel na porta {port}")

                elif module_name == "geral":
                    st.subheader("Componentes Reutiliz√°veis")
                    st.write(
                        "Este m√≥dulo cont√©m componentes e servi√ßos compartilhados."
                    )

                    # Mostrar os componentes dispon√≠veis
                    components = module_info.exported_components
                    if components:
                        with st.expander("Componentes Dispon√≠veis", expanded=False):
                            for name, component in sorted(components.items()):
                                st.write(f"- **{name}**: `{type(component).__name__}`")
                    else:
                        st.write("‚ÑπÔ∏è Nenhum componente exportado encontrado")

                # Componentes exportados (para qualquer m√≥dulo)
                with st.expander("Componentes Exportados", expanded=False):
                    components = module_info.exported_components
                    if components:
                        for name, component in sorted(components.items()):
                            st.write(f"- **{name}**: `{type(component).__name__}`")

                            # Se for uma fun√ß√£o ou m√©todo, mostrar informa√ß√µes adicionais
                            if callable(component):
                                try:
                                    import inspect

                                    signature = inspect.signature(component)
                                    st.code(f"{name}{signature}")
                                except Exception:
                                    pass
                    else:
                        st.write("‚ÑπÔ∏è Nenhum componente exportado encontrado")

# Informa√ß√µes sobre o sistema
with st.expander("Sobre o Orquestrador", expanded=False):
    st.write(
        """
    ## Orquestrador de M√≥dulos

    Este componente funciona como um hub central que:

    1. **Importa e integra servi√ßos** de outros m√≥dulos
    2. **Fornece interfaces unificadas** para esses servi√ßos
    3. **Disponibiliza componentes compartilhados**
    4. **Orquestra a intera√ß√£o** entre os m√≥dulos

    Para utilizar os servi√ßos modularizados individualmente, acesse:
    - Planejamento: http://localhost:8508
    - Tarefas: http://localhost:8509
    - An√°lise de Imagem: http://localhost:8507
    """
    )

# Restaurar as fun√ß√µes originais do Streamlit ao final do script
st.success = original_success
st.info = original_info
st.warning = original_warning
st.error = original_error
