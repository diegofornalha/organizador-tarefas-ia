"""
Script para implementa칞칚o do servi칞o de an치lise de imagem.
"""

import streamlit as st
import os
import sys
from dotenv import load_dotenv

# Configurar p치gina - DEVE SER O PRIMEIRO COMANDO STREAMLIT!
st.set_page_config(page_title="An치lise de Imagem", page_icon="游댌", layout="wide")

# Importar m칩dulos - usando importa칞칫es diretas
from app_logger import add_log, log_success, log_error, get_logs, clear_logs
from image_analysis_service import ImageAnalysisService

# Tentar importar os componentes reutiliz치veis
try:
    # Adicionar caminho para o m칩dulo analise_imagem
    analise_path = os.path.join(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "analise_imagem"
    )
    if analise_path not in sys.path:
        sys.path.append(analise_path)

    # Importar o componente
    from analise_imagem.components import image_analysis_ui

    # Flag para indicar que o componente foi importado com sucesso
    has_components = True
    log_success("Componente de an치lise de imagem importado com sucesso")
except ImportError as e:
    has_components = False
    log_error(f"N칚o foi poss칤vel importar componente: {str(e)}")

# Carregar vari치veis de ambiente
load_dotenv()

# Inicializar estado da sess칚o
if "last_plan" not in st.session_state:
    st.session_state.last_plan = None

# Inicializar servi칞o de an치lise de imagem
if "image_analysis_service" not in st.session_state:
    try:
        st.session_state.image_analysis_service = ImageAnalysisService(debug_mode=True)
        st.session_state.debug_mode = True
        log_success("Servi칞o de an치lise de imagem inicializado")
    except Exception as e:
        log_error(f"Erro ao inicializar servi칞o de an치lise de imagem: {str(e)}")

# T칤tulo da p치gina
st.title("游댌 An치lise de Imagem")
st.write("Esta p치gina permite testar o servi칞o de an치lise de imagem.")

# Exibir logs
with st.expander("Logs do Sistema", expanded=False):
    cols = st.columns([4, 1])
    with cols[1]:
        if st.button("Limpar Logs"):
            clear_logs()
            st.success("Logs limpos")
            st.rerun()

    logs = get_logs(max_count=20)
    if logs:
        for log in logs:
            st.text(log)
    else:
        st.info("Nenhum log registrado ainda.")

# Interface principal - An치lise de Imagem
st.header("Teste de An치lise de Imagem")

# Verificar se podemos usar o componente reutiliz치vel
if has_components:
    try:
        # Usar o componente diretamente
        uploaded_file, result = image_analysis_ui()

        # Se tiver um resultado, armazenar
        if result and uploaded_file:
            st.session_state.last_result = result
    except Exception as e:
        log_error(f"Erro ao usar componente reutiliz치vel: {str(e)}")
        # Se falhar, voltamos para a implementa칞칚o local
        has_components = False

# Se n칚o conseguiu usar o componente, usar a implementa칞칚o local
if not has_components:
    # Upload de imagem
    uploaded_file = st.file_uploader(
        "Escolha uma imagem",
        type=["jpg", "jpeg", "png"],
        key="image_analysis_uploader",
    )

    if uploaded_file is not None:
        # Mostrar imagem
        st.image(uploaded_file, caption="Imagem carregada", width=300)

        # Op칞칫es de an치lise
        options = st.radio(
            "Escolha o tipo de an치lise:", ["An치lise simples", "Gera칞칚o de planejamento"]
        )

        # Descri칞칚o adicional se for planejamento
        description = ""
        if options == "Gera칞칚o de planejamento":
            description = st.text_area(
                "Descri칞칚o adicional para o planejamento:",
                placeholder="Ex: Planejar uma viagem para este destino",
            )

        if st.button("Analisar Imagem"):
            add_log(f"Iniciando an치lise de imagem: {options}")

            with st.spinner("Processando imagem..."):
                try:
                    # Obter servi칞o
                    image_service = st.session_state.image_analysis_service

                    if options == "An치lise simples":
                        # An치lise simples
                        resultado = image_service.analyze_image(uploaded_file)
                        log_success("An치lise de imagem conclu칤da com sucesso")

                        # Exibir resultado
                        st.subheader("Resultado da An치lise")
                        st.write(resultado)

                    else:
                        # Gera칞칚o de planejamento
                        resultado = image_service.generate_planning_from_image(
                            uploaded_file, description=description
                        )
                        log_success("Plano gerado com sucesso")

                        # Exibir resultado
                        st.subheader("Plano Gerado")
                        st.write(resultado)

                        # Armazenar o resultado
                        st.session_state.last_result = resultado

                except Exception as e:
                    log_error(f"Erro na an치lise: {str(e)}")
                    st.error(f"Ocorreu um erro: {str(e)}")

# Informa칞칫es sobre o servi칞o
with st.expander("Sobre este servi칞o"):
    st.write(
        """
    Este 칠 um servi칞o de an치lise de imagem que utiliza:

    1. **An치lise simples**: Descri칞칚o das caracter칤sticas da imagem
    2. **Gera칞칚o de planejamento**: Cria칞칚o de um plano baseado no conte칰do da imagem

    Para utilizar os outros servi칞os modularizados individualmente, acesse:
    - Planejamento: http://localhost:8508
    - Tarefas: http://localhost:8509
    """
    )
