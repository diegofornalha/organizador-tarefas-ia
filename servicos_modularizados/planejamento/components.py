"""
Componentes reutiliz√°veis para gera√ß√£o de planejamento.
Este m√≥dulo cont√©m componentes de UI que podem ser compartilhados.
"""

import streamlit as st
import json
import re
import uuid
from datetime import datetime
import os
import sys

# Adicionar caminhos para importa√ß√£o
SERVICES_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
GERAL_DIR = os.path.join(SERVICES_DIR, "geral")

# Adicionar diret√≥rios ao path se necess√°rio
if GERAL_DIR not in sys.path:
    sys.path.insert(0, GERAL_DIR)

# Importar funcionalidades necess√°rias
from geral.app_logger import add_log, log_success, log_error
from geral.image_analysis_service import ImageAnalysisService


def planning_ui(container=None):
    """
    Renderiza a interface de gera√ß√£o de planejamento em um container
    ou diretamente na p√°gina se container=None.

    Args:
        container: Opcional, container streamlit para renderizar o componente.
                  Se None, usa st diretamente.

    Returns:
        Tuple: (plan_image, plan_result) - A imagem carregada e o resultado do planejamento
    """
    # Escolher onde renderizar (container ou diretamente)
    ui = container if container else st

    plan_result = None
    plan_image = None

    # Layout com duas colunas
    col1, col2 = ui.columns([3, 2])

    with col1:
        # Descri√ß√£o do projeto/tarefa
        ui.subheader("Descri√ß√£o do Projeto")
        project_description = ui.text_area(
            "Descreva o projeto ou tarefa a ser planejado:",
            placeholder="Ex: Organizar uma festa de anivers√°rio para 30 pessoas",
            height=150,
        )

        # Upload de imagem relacionada (opcional)
        ui.subheader("Imagem de Refer√™ncia (Opcional)")
        plan_image = ui.file_uploader(
            "Selecione uma imagem de refer√™ncia para o planejamento",
            type=["jpg", "jpeg", "png"],
            key="planning_uploader",
        )

        if plan_image:
            ui.image(plan_image, caption="Imagem de refer√™ncia", width=300)

        # Op√ß√µes adicionais
        ui.subheader("Op√ß√µes Adicionais")
        detailed_plan = ui.checkbox("Plano detalhado", value=True)

        # Guardar o estado do checkbox de cronograma
        include_timeline_key = "include_timeline_checkbox"
        if include_timeline_key not in st.session_state:
            st.session_state[include_timeline_key] = False

        include_timeline = ui.checkbox(
            "Incluir cronograma",
            value=st.session_state[include_timeline_key],
            key=include_timeline_key,
        )

        # Bot√£o para gerar o plano
        if ui.button("Gerar Plano de Tarefas"):
            if not project_description:
                ui.error("Por favor, forne√ßa uma descri√ß√£o do projeto.")
            else:
                with ui.spinner("Gerando plano de tarefas..."):
                    try:
                        # Garantir que o servi√ßo exista na sess√£o
                        if "image_analysis_service" not in st.session_state:
                            st.session_state.image_analysis_service = (
                                ImageAnalysisService(debug_mode=True)
                            )

                        # Obter servi√ßo
                        image_service = st.session_state.image_analysis_service

                        # Preparar descri√ß√£o completa
                        full_description = project_description
                        if detailed_plan:
                            full_description += "\n\nPor favor, forne√ßa um plano detalhado com tarefas e subtarefas."
                        if include_timeline:
                            full_description += (
                                "\n\nInclua um cronograma sugerido para cada tarefa."
                            )

                        # Gerar o plano (com ou sem imagem)
                        if plan_image:
                            plan_result = image_service.generate_planning_from_image(
                                plan_image, description=full_description
                            )
                        else:
                            # Usar o mesmo servi√ßo mas sem imagem
                            prompt = f"""
                            Voc√™ √© um assistente especializado em organizar tarefas.
                            Com base na descri√ß√£o fornecida, crie um plano detalhado
                            com tarefas, subtarefas e um cronograma.

                            Descri√ß√£o: {full_description}

                            Organize sua resposta no seguinte formato JSON:
                            {{
                                "titulo": "T√≠tulo do plano",
                                "descricao": "Descri√ß√£o geral do plano",
                                "tarefas": [
                                    {{
                                        "titulo": "T√≠tulo da tarefa 1",
                                        "descricao": "Descri√ß√£o detalhada",
                                        "prioridade": "alta|m√©dia|baixa",
                                        "subtarefas": [
                                            {{
                                                "titulo": "Subtarefa 1.1",
                                                "descricao": "Descri√ß√£o da subtarefa"
                                            }}
                                        ]
                                    }}
                                ]
                            }}
                            """
                            plan_result = image_service.analyze_image(
                                None, prompt=prompt
                            )

                        log_success("Plano de tarefas gerado com sucesso")

                        # Armazenar o plano para uso posterior
                        if "last_plan" not in st.session_state:
                            st.session_state.last_plan = plan_result
                        else:
                            st.session_state.last_plan = plan_result

                        # Exibir resultado na outra coluna
                        with col2:
                            ui.subheader("Plano Gerado")
                            ui.write(plan_result)

                            # Tentar extrair JSON se existir
                            try:
                                json_content = plan_result

                                # Extrair apenas o JSON (pode estar entre ```json e ```)
                                json_match = re.search(
                                    r"```(?:json)?\s*([\s\S]*?)\s*```", json_content
                                )
                                if json_match:
                                    json_content = json_match.group(1)

                                # Tentar carregar como JSON
                                plano = json.loads(json_content)

                                if "tarefas" in plano:
                                    ui.subheader("Visualiza√ß√£o Estruturada")
                                    ui.write(
                                        f"**{plano.get('titulo', 'Plano de Tarefas')}**"
                                    )
                                    ui.write(plano.get("descricao", ""))

                                    for i, tarefa in enumerate(plano["tarefas"]):
                                        tarefa_titulo = tarefa["titulo"]
                                        tarefa_prio = tarefa.get("prioridade", "m√©dia")
                                        with ui.expander(
                                            f"{i+1}. {tarefa_titulo} ({tarefa_prio})"
                                        ):
                                            ui.write(tarefa.get("descricao", ""))
                                            if (
                                                "subtarefas" in tarefa
                                                and tarefa["subtarefas"]
                                            ):
                                                ui.write("**Subtarefas:**")
                                                for j, subtarefa in enumerate(
                                                    tarefa["subtarefas"]
                                                ):
                                                    ui.write(f"- {subtarefa['titulo']}")

                                    # Remover bot√£o para criar tarefas, pois elas ser√£o criadas automaticamente
                                    # Apenas informar ao usu√°rio
                                    ui.success("Tarefas sendo criadas automaticamente!")
                            except Exception as error:
                                # Se n√£o conseguir extrair JSON, apenas mostrar o texto
                                pass

                    except Exception as e:
                        log_error(f"Erro ao gerar plano: {str(e)}")
                        ui.error(f"N√£o foi poss√≠vel gerar o plano: {str(e)}")

    return plan_image, plan_result


def planning_standalone():
    """
    Vers√£o standalone da interface de planejamento.
    Usado quando este m√≥dulo √© executado diretamente.
    """
    import streamlit as st
    from geral.app_logger import get_logs, clear_logs

    # Configurar p√°gina
    st.set_page_config(
        page_title="Gera√ß√£o de Planejamento", page_icon="üìã", layout="wide"
    )

    # T√≠tulo da p√°gina
    st.title("üìã Gera√ß√£o de Planejamento")
    st.write("Ferramenta para cria√ß√£o de planos de tarefas com IA.")

    # Exibir logs
    with st.expander("Logs do Sistema", expanded=False):
        cols = st.columns([4, 1])
        with cols[1]:
            if st.button("Limpar Logs"):
                clear_logs()
                st.success("Logs limpos")
                st.rerun()

        logs = get_logs(max_count=20)
        if logs:
            for log in logs:
                st.text(log)
        else:
            st.info("Nenhum log registrado ainda.")

    # Interface principal
    st.header("Gera√ß√£o de Planejamento")

    # Usar o componente reutiliz√°vel
    planning_ui()

    # Informa√ß√µes sobre o m√≥dulo
    with st.expander("Sobre esta ferramenta"):
        st.write(
            """
        Esta √© uma vers√£o modular do servi√ßo de planejamento.
        Ela permite criar planos de tarefas detalhados com op√ß√µes para:

        1. **Descri√ß√£o textual** do projeto ou tarefa
        2. **Imagem de refer√™ncia** (opcional)
        3. **Op√ß√µes adicionais** como detalhamento e cronograma

        Os planos gerados podem ser exportados como tarefas para gerenciamento.
        """
        )
