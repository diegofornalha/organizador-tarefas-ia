#!/bin/bash

echo "====================================================="
echo "  DEMONSTRA√á√ÉO DO M√ìDULO DE HIST√ìRICO DE TAREFAS"
echo "====================================================="
echo ""

# Diret√≥rio atual do script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$DIR"

# Configurar PYTHONPATH
export PYTHONPATH="$DIR/../..:$PYTHONPATH"

# Verificar se o streamlit est√° instalado
if ! python -c "import streamlit" &> /dev/null; then
    echo "Instalando depend√™ncia: streamlit..."
    pip install streamlit pandas altair
fi

# Criar arquivo de demonstra√ß√£o tempor√°rio
cat > app_demo.py << 'EOF'
"""
Aplicativo de demonstra√ß√£o para o m√≥dulo de hist√≥rico de tarefas.
Este script mostra como utilizar o m√≥dulo historico_tarefas
de forma independente.
"""

import streamlit as st
import uuid
from datetime import datetime, timedelta

# Importar o m√≥dulo de hist√≥rico de tarefas
try:
    import historico_tarefas
except ImportError:
    import sys
    import os
    # Adicionar diret√≥rio pai ao path
    module_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if module_path not in sys.path:
        sys.path.insert(0, module_path)
    import historico_tarefas

# Configurar a p√°gina
st.set_page_config(
    page_title="Demo - Hist√≥rico de Tarefas",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo personalizado
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f0f0;
        border-radius: 4px 4px 0 0;
        padding: 8px 16px;
        border: 1px solid #e0e0e0;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4CAF50;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # T√≠tulo principal
    st.title("üìä Demonstra√ß√£o: M√≥dulo de Hist√≥rico de Tarefas")

    # Informa√ß√µes sobre o m√≥dulo
    st.info("""
    **M√≥dulo: historico_tarefas**

    Este m√≥dulo fornece funcionalidades para rastrear, visualizar e analisar
    o hist√≥rico de tarefas em uma aplica√ß√£o Streamlit. Ele pode ser facilmente
    integrado a qualquer aplica√ß√£o que precise manter um registro de atividades
    relacionadas a tarefas.
    """)

    # Dividir em abas
    tab1, tab2, tab3 = st.tabs([
        "‚ú® Cria√ß√£o de Tarefas",
        "üìã Visualiza√ß√£o do Hist√≥rico",
        "üìä An√°lises"
    ])

    # Tab 1: Criar tarefas de exemplo
    with tab1:
        st.header("Cria√ß√£o de Tarefas de Exemplo")

        # Formul√°rio para criar tarefa
        with st.form("criar_tarefa"):
            st.subheader("Nova Tarefa")

            # Campos do formul√°rio
            titulo = st.text_input("T√≠tulo da tarefa", value="Tarefa de exemplo")
            descricao = st.text_area("Descri√ß√£o", value="Descri√ß√£o da tarefa de exemplo")
            prioridade = st.select_slider(
                "Prioridade",
                options=["Baixa", "M√©dia", "Alta"],
                value="M√©dia"
            )
            data_vencimento = st.date_input(
                "Data de vencimento",
                value=datetime.now() + timedelta(days=7)
            )

            # Bot√µes
            col1, col2 = st.columns(2)
            with col1:
                submit = st.form_submit_button("Criar Tarefa")
            with col2:
                criar_varias = st.form_submit_button("Criar 5 Tarefas de Exemplo")

        # Processar cria√ß√£o de tarefa √∫nica
        if submit:
            task_id = str(uuid.uuid4())
            historico_tarefas.record_task_event(
                task_id=task_id,
                task_title=titulo,
                event_type="created",
                details=f"Prioridade: {prioridade}, Vencimento: {data_vencimento}"
            )
            st.success(f"Tarefa '{titulo}' criada com sucesso!")

            # Perguntar se deseja marcar como conclu√≠da
            if st.button("Marcar como Conclu√≠da"):
                historico_tarefas.record_task_event(
                    task_id=task_id,
                    task_title=titulo,
                    event_type="completed",
                    details="Tarefa conclu√≠da na demonstra√ß√£o"
                )
                st.success(f"Tarefa '{titulo}' marcada como conclu√≠da!")

        # Processar cria√ß√£o de m√∫ltiplas tarefas
        if criar_varias:
            for i in range(1, 6):
                task_id = str(uuid.uuid4())
                task_title = f"Tarefa demonstrativa #{i}"

                # Criar tarefa
                historico_tarefas.record_task_event(
                    task_id=task_id,
                    task_title=task_title,
                    event_type="created",
                    details=f"Tarefa autom√°tica criada na demonstra√ß√£o"
                )

                # Algumas tarefas ser√£o conclu√≠das
                if i % 2 == 0:
                    historico_tarefas.record_task_event(
                        task_id=task_id,
                        task_title=task_title,
                        event_type="completed",
                        details="Conclu√≠da automaticamente na demonstra√ß√£o"
                    )

                # Uma tarefa ser√° exclu√≠da
                if i == 3:
                    historico_tarefas.record_task_event(
                        task_id=task_id,
                        task_title=task_title,
                        event_type="deleted",
                        details="Exclu√≠da na demonstra√ß√£o"
                    )

            st.success("5 tarefas demonstrativas foram criadas com sucesso!")

    # Tab 2: Visualizar hist√≥rico
    with tab2:
        st.header("Visualiza√ß√£o do Hist√≥rico de Tarefas")

        # Exibir o componente de hist√≥rico
        historico_tarefas.show_tasks_history_panel()

    # Tab 3: An√°lises
    with tab3:
        st.header("An√°lises de Produtividade")

        # Exibir o componente de an√°lise
        historico_tarefas.show_tasks_analytics()

    # Sidebar com resumo
    historico_tarefas.show_tasks_history_sidebar()

    # Informa√ß√µes sobre a implementa√ß√£o
    st.divider()
    st.subheader("Sobre a Implementa√ß√£o")

    st.markdown("""
    Este m√≥dulo implementa as seguintes fun√ß√µes principais:

    * `record_task_event()`: Registra eventos relacionados a tarefas
    * `get_tasks_history()`: Obt√©m o hist√≥rico de tarefas
    * `show_tasks_history_sidebar()`: Exibe um resumo do hist√≥rico na barra lateral
    * `show_tasks_history_panel()`: Exibe o hist√≥rico completo em um painel
    * `show_tasks_analytics()`: Exibe an√°lises e gr√°ficos baseados no hist√≥rico
    * `clear_tasks_history()`: Limpa o hist√≥rico de tarefas

    O m√≥dulo suporta integra√ß√£o com Firestore para persist√™ncia dos dados,
    quando dispon√≠vel, e tamb√©m mant√©m os dados na session_state do Streamlit.
    """)

    # Mostrar c√≥digo de exemplo
    with st.expander("Ver exemplo de c√≥digo de uso"):
        st.code("""
# Importar o m√≥dulo
import historico_tarefas

# Registrar evento de cria√ß√£o de tarefa
historico_tarefas.record_task_event(
    task_id="12345",
    task_title="Minha tarefa",
    event_type="created",
    details="Detalhes adicionais da tarefa"
)

# Exibir o hist√≥rico na sidebar
historico_tarefas.show_tasks_history_sidebar()

# Exibir painel completo
historico_tarefas.show_tasks_history_panel()

# Exibir an√°lises
historico_tarefas.show_tasks_analytics()
        """, language="python")

if __name__ == "__main__":
    main()
EOF

# Executar a demonstra√ß√£o
echo "Iniciando a demonstra√ß√£o do m√≥dulo de hist√≥rico de tarefas..."
echo "A aplica√ß√£o estar√° dispon√≠vel em http://localhost:8513"
echo ""
echo "Pressione Ctrl+C para encerrar quando terminar."
echo "====================================================="

streamlit run app_demo.py --server.port=8513
