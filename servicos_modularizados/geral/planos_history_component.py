"""
Componente reutiliz치vel para hist칩rico de planos.
Permite visualizar, gerenciar e interagir com o hist칩rico de planos
gerados em qualquer aplicativo que utilize este componente.
"""

import streamlit as st
from datetime import datetime
from typing import List, Dict, Any, Optional, Callable

# Importar servi칞os necess치rios
try:
    from .app_logger import log_success, log_error, log_warning
    from .firestore_service import firestore_service
except ImportError:
    # Caso falhe, tenta importar diretamente (quando executado como script)
    from app_logger import log_success, log_error, log_warning
    from firestore_service import firestore_service


def show_plans_history_sidebar(
    on_new_query_click: Optional[Callable] = None, container=None
):
    """
    Exibe o hist칩rico de planos na barra lateral.

    Args:
        on_new_query_click: Fun칞칚o a ser chamada quando o bot칚o "Nova Consulta" for clicado
        container: Container onde o componente ser치 renderizado (opcional)
    """
    # Escolher onde renderizar
    ui = container if container else st.sidebar

    # Bot칚o para Nova Consulta
    if ui.button("游댃 Nova Consulta", use_container_width=True):
        # Limpar o formul치rio e estado atual
        if "last_plan" in st.session_state:
            st.session_state.last_plan = None

        # Chamar fun칞칚o de callback, se fornecida
        if on_new_query_click:
            on_new_query_click()

        # For칞ar recarregamento da p치gina
        st.rerun()

    ui.header("游닄 Hist칩rico de Planos")

    # Carregar hist칩rico
    _ensure_plans_history_loaded()

    if not st.session_state.planos_historico:
        ui.info("Nenhum plano foi gerado ainda.")
    else:
        ui.write(f"Total de planos: {len(st.session_state.planos_historico)}")

        # Exibir planos em acorde칫es
        for i, plano_info in enumerate(st.session_state.planos_historico):
            with ui.expander(f"Plano #{i+1}: {plano_info.get('titulo', 'Sem t칤tulo')}"):
                ui.text_area(
                    "JSON do Plano",
                    value=plano_info.get("json", "{}"),
                    height=200,
                    disabled=True,
                    key=f"plano_json_{i}",
                )

    # Bot칚o para limpar hist칩rico
    if st.session_state.planos_historico and ui.button("Limpar Hist칩rico"):
        _clear_plans_history()
        ui.success("Hist칩rico de planos limpo!")
        st.rerun()


def save_plan_to_history(plan_data: Dict[str, Any]) -> bool:
    """
    Salva um plano no hist칩rico (tanto na session_state quanto no Firestore).

    Args:
        plan_data: Dados do plano (deve conter t칤tulo e json)

    Returns:
        bool: True se salvo com sucesso
    """
    try:
        # Verificar se j치 temos o hist칩rico inicializado
        _ensure_plans_history_loaded()

        # Adicionar ao hist칩rico local
        st.session_state.planos_historico.append(plan_data)

        # Salvar no Firestore tamb칠m
        try:
            firestore_service.save_plan_to_history(plan_data)
        except Exception as e:
            log_error(f"Erro ao salvar plano no Firestore: {str(e)}")

        return True

    except Exception as e:
        log_error(f"Erro ao salvar plano no hist칩rico: {str(e)}")
        return False


def _ensure_plans_history_loaded():
    """
    Garante que o hist칩rico de planos est치 carregado na session_state.
    Se n칚o estiver, tenta carregar do Firestore.
    """
    if "planos_historico" not in st.session_state:
        st.session_state.planos_historico = []

        # Tentar carregar do Firestore
        try:
            planos_firestore = firestore_service.get_plans_history()
            if planos_firestore:
                # Converter para o formato usado na session_state
                for plano in planos_firestore:
                    st.session_state.planos_historico.append(
                        {
                            "titulo": plano.get("titulo", "Plano sem t칤tulo"),
                            "json": plano.get("json", "{}"),
                            "data": plano.get("created_at", datetime.now().isoformat()),
                        }
                    )
                log_success(
                    f"Carregados {len(planos_firestore)} planos do hist칩rico do Firestore"
                )
        except Exception as e:
            log_error(f"Erro ao carregar hist칩rico do Firestore: {str(e)}")


def _clear_plans_history():
    """
    Limpa o hist칩rico de planos da session_state e do Firestore.
    """
    st.session_state.planos_historico = []

    # Limpar tamb칠m no Firestore
    try:
        if firestore_service.clear_plans_history():
            log_success("Hist칩rico de planos limpo tamb칠m no Firestore")
    except Exception as e:
        log_error(f"Erro ao limpar hist칩rico no Firestore: {str(e)}")
